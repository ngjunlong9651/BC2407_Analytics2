#95% CI
n = 30
samplemean = mean(x)
sample_sd = sd(x)
z_95 = qt(0.975,n-1)
LL = samplemean - z_95*(sample_sd/sqrt(n))
UL = samplemean + z_95*(sample_sd/sqrt(n))
c(LL,UL)
sample_size = length(x$weight[x$Time==8])
x = ChickWeight
sample_size = length(x$weight[x$Time==8])
samplemean = mean(x$weight[x$Time==8])
sample_sd = sd((x$weight[x$Time==8]))
z_85 = qt(0.925,sample_size-1)
print(sample_size)
LL = samplemean - z_95*(sample_sd/sqrt(n))
UL = samplemean + z_95*(sample_sd/sqrt(n))
c(LL,UL)
############
#Qn 3
set.seed(123)
x = runif(42,50,88)
min(x)
############
#Qn 3
set.seed(123)
x = runif(42,50,88)
############
#Qn 3
set.seed(123)
x = runif(42,50,88)
print(min(x))
set.seed(88)
set.seed(88)
sample(c(2,17,22),15,prob = c(0.2,0.3,0.5))
set.seed(88)
sample(c(2,17,22),15,prob = c(0.2,0.3,0.5),replace = T)
mean(sample)
sample(c(2,17,22),15,prob = c(0.2,0.3,0.5),replace = T)
sample1 = sample(c(2,17,22),15,prob = c(0.2,0.3,0.5),replace = T)
mean(sample1)
set.seed(88)
sample1 = sample(c(2,17,22),15,prob = c(0.2,0.3,0.5),replace = T)
mean(sample1)
(qnorm(0.975,0,1)*9600) - 900
(qnorm(0.975,0,1)*9600) / 900
((qnorm(0.975,0,1)*9600) / 900) ^ 2
miux = 40
samplemean = 38.8
sample_size = 38
pop_sd = 6.4
alpha = 0.01
z_score = (samplemean - miux)/ (pop_sd/sqrt(sample_size))
print(z_score)
if (z_score > 0){
p_value = 2 * (1-pnorm(z_score,0,1))
} else {p_value = 2 * (pnorm(z_score,0,1))
}
print(p_value)
alpha = 0.05
if(p_value > alpha){
print(" P Value > Alpha. Do not reject H0")
} else { print("P Value < Alpha. Reject H0")
}
miux = 40
samplemean = 42.8
sample_size = 38
pop_sd = 6.4
alpha = 0.01
z_score = (samplemean - miux)/ (pop_sd/sqrt(sample_size))
print(z_score)
if (z_score > 0){
p_value = 2 * (1-pnorm(z_score,0,1))
} else {p_value = 2 * (pnorm(z_score,0,1))
}
print(p_value)
# 0.2477517
alpha = 0.05
if(p_value > alpha){
print(" P Value > Alpha. Do not reject H0")
} else { print("P Value < Alpha. Reject H0")
}
z_score
pnorm(z_score+0.01,0,1) - pnorm(z_score-0.01,0,1)
x = ChickWeight
sample_size = length(x$weight[x$Time==8])
samplemean = mean(x$weight[x$Time==8])
sample_sd = sd((x$weight[x$Time==8]))
print(sample_size)
print(sample_sd)
print(sample_size)
print(samplemean)
x = ChickWeight
sample_size = length(x$weight[x$Time==8])
print(sample_size)
samplemean = mean(x$weight[x$Time==8])
print(samplemean)
sample_sd = sd((x$weight[x$Time==8]))
print(sample_sd)
z_85 = qt(0.925,sample_size-1)
LL = samplemean - z_95*(sample_sd/sqrt(sample_size))
print(LL)
UL = samplemean + z_95*(sample_sd/sqrt(sample_size))
print(UL)
c(LL,UL)
print(sample_size)
x = ChickWeight
sample_size = length(x$weight[x$Time==8])
print(sample_size)
samplemean = mean(x$weight[x$Time==8])
print(samplemean)
sample_sd = sd((x$weight[x$Time==8]))
print(sample_sd)
z_85 = qt(0.925,sample_size-1)
print(sample_size)
LL = samplemean - z_85*(sample_sd/sqrt(sample_size))
print(LL)
UL = samplemean + z_85*(sample_sd/sqrt(sample_size))
print(UL)
c(LL,UL)
############
#Qn 3
set.seed(123)
############
#Qn 3
set.seed(29)
x = runif(42,50,88)
print(min(x))
set.seed(88)
miux = 40
samplemean = 38.8
sample_size = 38
pop_sd = 6.4
alpha = 0.01
z_score = (samplemean - miux)/ (pop_sd/sqrt(sample_size))
print(z_score)
if (z_score > 0){
p_value = 2 * (1-pnorm(z_score,0,1))
} else {p_value = 2 * (pnorm(z_score,0,1))
}
print(p_value)
# 0.2477517
alpha = 0.05
if(p_value > alpha){
print(" P Value > Alpha. Do not reject H0")
} else { print("P Value < Alpha. Reject H0")
}
miux = 40
samplemean = 38.8
sample_size = 38
pop_sd = 6.4
alpha = 0.01
z_score = (samplemean - miux)/ (pop_sd/sqrt(sample_size))
print(z_score)
if (z_score > 0){
p_value = 2 * (1-pnorm(z_score,0,1))
} else {p_value = 2 * (pnorm(z_score,0,1))
}
print(p_value)
Z= (38.8-40) / (6.4/sqrt(38))
p-value= 2*pnorm(Z,0,1)
p_value= 2*pnorm(Z,0,1)
print(p_value)
##########
# Qn 8
set.seed(69)
##########
# Qn 8
set.seed(69)
timeneeded = rep(0,1000) #setting the iterations
for (i in 1:1000) {
seminar_hive = runif(1,5,12)
Taxi = runif(1,5,10)
taxi_home = runif(1,20,35)
total_wait_time = seminar_hive + Taxi + taxi_home
}
print(total_wait_time)
av_wait_time = mean(total_wait_time)
print(av_wait_time)
total_wait_time = mean(seminar_hive + Taxi + taxi_home)
print(total_wait_time)
print(av_wait_time)
print(av_wait_time)
##########
# Qn 8
set.seed(69)
timeneeded = rep(0,1000) #setting the iterations
for (i in 1:1000) {
seminar_hive = runif(1,5,12)
Taxi = runif(1,5,10)
taxi_home = runif(1,20,35)
total_wait_time = (seminar_hive + Taxi + taxi_home)
}
av_wait_time = mean(total_wait_time)
print(av_wait_time)
# Loads the standard dataset mtcars from a base package in R.
data(mtcars)
# Correlation Matrix
cor(mtcars)
round(cor(mtcars), 2)
# Correlation Matrix
cor(mtcars)
# Loads the standard dataset mtcars from a base package in R.
data(mtcars)
# Correlation Matrix
cor(mtcars)
round(cor(mtcars), 2)
# Correlation Plot
install.packages("corrplot")
library(corrplot)
corrplot(cor(mtcars), type = "upper")
plot(mtcars$mpg, mtcars$wt)
cor(mtcars$mpg, mtcars$wt)
plot(mtcars$mpg, mtcars$hp)
cor(mtcars$mpg, mtcars$hp)
plot(mtcars$mpg, mtcars$qsec)
cor(mtcars$mpg, mtcars$qsec)
plot(mtcars$drat, mtcars$qsec)
cor(mtcars$drat, mtcars$qsec)
plot(mtcars$hp, mtcars$cyl)
cor(mtcars$hp, mtcars$cyl)
# m1 with wt only -------------------------------------------------------------------
m1 <- lm(mpg ~ wt, data = mtcars)
# m1 with wt only -------------------------------------------------------------------
m1 <- lm(mpg ~ wt, data = mtcars)
summary(m1) # See the PPT file
# Correlation Matrix
cor(mtcars)
round(cor(mtcars), 2)
# Correlation Plot
install.packages("corrplot")
install.packages("corrplot")
corrplot(cor(mtcars), type = "upper")
plot(mtcars$mpg, mtcars$wt)
cor(mtcars$mpg, mtcars$wt)
plot(mtcars$mpg, mtcars$hp)
cor(mtcars$mpg, mtcars$hp)
plot(mtcars$mpg, mtcars$qsec)
cor(mtcars$mpg, mtcars$qsec)
plot(mtcars$drat, mtcars$qsec)
cor(mtcars$drat, mtcars$qsec)
plot(mtcars$hp, mtcars$cyl)
cor(mtcars$hp, mtcars$cyl)
# m1 with wt only -------------------------------------------------------------------
m1 <- lm(mpg ~ wt, data = mtcars)
summary(m1) # See the PPT file
plot(x = mtcars$wt, y = mtcars$mpg, main = "Regression Line with wt as sole factor")
abline(m1, col = "red")
identify(x = mtcars$wt, y = mtcars$mpg) # Identify the cases selected in Plot.
par(mfrow = c(2,2))  # Plot 4 charts in one plot - 2 by 2.
plot(m1)  # Plot model 1 diagnostics, See the PPT file
par(mfrow = c(1,1))  # Reset plot options to 1 chart in one plot.
# m2 with Wt and Wt^2 ----------------------------------------------------------------
m2 <- lm(mpg ~ wt + I(wt^2), data = mtcars)
summary(m2)
par(mfrow = c(2,2))  # Plot 4 charts in one plot - 2 by 2.
plot(m2)  # Plot model 2 diagnostics
par(mfrow = c(1,1))  # Reset plot options to 1 chart in one plot.
# m3 with wt and cyl ----------------------------------------------------------------
str(mtcars$cyl)
mtcars <- mtcars  # create a copy to preserve the orignal dataset.
mtcars$cyl <- factor(mtcars$cyl)
str(mtcars$cyl)  # Check data structure is now factor
levels(mtcars$cyl)
m3 <- lm(mpg ~ wt + cyl, data = mtcars)
summary(m3)  # See the PPT file
# m1 with wt only -------------------------------------------------------------------
m1 <- lm(mpg ~ wt, data = mtcars)
plot(m1)  # Plot model 1 diagnostics, See the PPT file
abline(m1, col = "red")
identify(x = mtcars$wt, y = mtcars$mpg) # Identify the cases selected in Plot.
library(arules)
install.packages("Matrix")
yes
install.packages("Matrix")
library(arules)
install.packages(c("Amelia", "bit", "boot", "brio", "broom", "bslib", "callr", "car", "class", "cli", "cluster", "collections", "colorspace", "cpp11", "curl", "data.table", "datawizard", "dbplyr", "desc", "diffobj", "digest", "doRNG", "DT", "e1071", "emmeans", "evaluate", "extrafont", "FactoMineR", "fansi", "foreign", "fs", "future", "future.apply", "ggpubr", "ggrepel", "globals", "gower", "gtable", "gtools", "highr", "htmltools", "htmlwidgets", "httr", "insight", "isoband", "jsonlite", "knitr", "languageserver", "lattice", "lava", "listenv", "lme4", "lubridate", "magrittr", "maptools", "MASS", "matrixStats", "mgcv", "mice", "mime", "minqa", "mnormt", "modelr", "network", "nlme", "nnet", "openssl", "parallelly", "pbkrtest", "performance", "pkgload", "plyr", "processx", "progressr", "proxy", "pryr", "ps", "psych", "purrr", "quanteda", "R.utils", "R6", "randomForest", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readODS", "recipes", "repr", "rmarkdown", "roxygen2", "rpart", "rprojroot", "rstatix", "rstudioapi", "Rttf2pt1", "sass", "skimr", "slam", "sna", "sp", "spatial", "statnet.common", "stringi", "stringr", "styler", "survival", "sys", "testthat", "tidyr", "timeDate", "tinytex", "vctrs", "vroom", "waldo", "xfun", "yaml"))
library(arules)
library(arules)
library(arules)
library(arules)
install.packages("arules")
library(arules)
setwd("/Users/junlongng/Desktop/NTU/Year_2/Semester 2/BC2407 Analytics II/BC2407 Course Materials/S3 Association Rules")
df = read.csv("/Users/junlongng/Desktop/NTU/Year_2/Semester 2/BC2407 Analytics II/BC2407 Course Materials/S3 Association Rules/milk.csv")
df[] = lapply(df,factor)
summary(df)
str(df)
df = df[,-1]
df
trans = as("data.frame","transactions")
trans = as(df,"transactions")
inspect(trans)
## Transforming Transactions Datatype to LongDataType
long = toLongFormat(df)
library("reshape2")
install.packages("reshape2")
library(reshape2)
library(reshape2)
widedata = df
longdata = df
## We shall start with the longdata format
longdata = df
longdata = melt(data = longdata, id.vars = "ID")
longdata = melt(data = longdata, id.vars = "ID")
## We shall start with the longdata format
longdata = df
longdata
library(arules)
library(reshape2)
setwd("/Users/junlongng/Desktop/NTU/Year_2/Semester 2/BC2407 Analytics II/BC2407 Course Materials/S3 Association Rules")
df = read.csv("/Users/junlongng/Desktop/NTU/Year_2/Semester 2/BC2407 Analytics II/BC2407 Course Materials/S3 Association Rules/milk.csv")
## We shall start with the longdata format
longdata = df
longdata
longdata = melt(data = longdata, id.vars = "ID")
longdata
install.packages("tidyr")
library(tidyr)
## We will now convert long to wide data type
widedata = df
widedata
longdata = longdata[,1:2]
longdata
## We shall start with the longdata format
longdata = df
longdata
longdata = melt(data = longdata, id.vars = "ID")
longdata
## Removing the ID & Index column
longdata = longdata[,1:2]
## We will now convert long to wide data type
widedata = df
widedata
widedata = widedata[,-1]
widedata
## We will now convert long to wide data type
widedata = df
widedata
widedata = widedata[,-1]
setwd('/Users/junlongng/Desktop/NTU/Year_2/Semester 2/BC2407 Analytics II/BC2407 Course Materials/S3 Association Rules"')
library(data.table)
library(reshape2)
setwd('/Users/junlongng/Desktop/NTU/Year_2/Semester 2/BC2407 Analytics II/BC2407 Course Materials/S3 Association Rules"')
setwd("/Users/junlongng/Desktop/NTU/Year_2/Semester 2/BC2407 Analytics II/BC2407 Course Materials/S3 Association Rules")
milk <- fread("milk.csv")
str(milk)
milk <- lapply(milk, function(x){as.factor(x)})
str(milk)
milk
df[] = lapply(df,factor)
summary(df)
str(df)
#Convert wide to long
milk_long <- melt(setDT(milk), id.vars = c("ID"), variable.name = "item")
str(milk_long)
milk_long <- milk_long[!(milk_long$value == "0"),]
milk_long <- subset(milk_long, select = -c(value))
milk_long
#Convert long to wide
milk_wide <- dcast(unique(milk_long),
formula = ID ~ item,
fun.aggregate = length)
milk_wide
#Convert long to wide
milk_wide <- dcast(unique(milk_long),
formula = ID ~ item,
fun.aggregate = length)
milk_wide
trans = as(df,"transactions")
## Inspecting the transactions datatype
inspect(trans)
## Trying it out with a wide data
inspect(widedata)
## Inspecting the transactions datatype
inspect(trans)
## Trying it out with a wide data
inspect(widedata)
# Convert from long format to transactions datatype --------------------------------------------
source("meltmilk.R")
widedata[] = lapply(widedata,factor)
summary(widedata)
str(widedata)
str(widedata)
summary(widedata)
## Converting the datatype to a transaction data format
trans = as(widedata, "transactions")
## Inspecting the transactions datatype
inspect(trans)
## Trying it out with a wide data
inspect(trans)
## Trying it out with a wide data
inspect(trans)
## Trying it out with a wide data
ruleswide = apriori(data = trans, parameter = list(minlen = 2, supp = 0.4, conf = 0.3, target = "rules"))
summary(ruleswide)
## This returns us a set of 65 rules.
## From these 65 rules, we shall inspect the top 10 rules
inspect(head(ruleswide, n = 10, by ="lift"))
## This returns us a set of 65 rules.
## From these 65 rules, we shall inspect the top 10 rules
inspect(head(ruleswide, n = 10, by ="support"))
## This returns us a set of 65 rules.
## From these 65 rules, we shall inspect the top 10 rules by support, confidence, lift
inspect(head(ruleswide, n = 10, by ="support"))
inspect(head(ruleswide, n = 10, by ="confidence"))
inspect(head(ruleswide, n = 10, by ="lift"))
rules.wide = inspect(ruleswide)
rules.wide
## Trying it out with a long data
inspect(longdata)
## Trying it out with a long data
longdata
ruleslong = apriori(data = longdata, parameter = list(minlen = 2, supp = 0.4, conf = 0.3, target = "rules")) )
ruleslong = apriori(data = longdata, parameter = list(minlen = 2, supp = 0.4, conf = 0.3, target = "rules"))
## Need to convert this to factorial
longdata = lapply(longdata, factor)
ruleslong = apriori(data = longdata, parameter = list(minlen = 2, supp = 0.4, conf = 0.3, target = "rules"))
longdata
library(arules)
setwd("/Users/junlongng/Desktop/NTU/Year_2/Semester 2/Tim's Notes/BC2407 Analytics II/Course Materials Part 1 (wk 1 to 6)/S3 Association Rules/Week 3 Solutions (Assoc Rules)")
widedata <- read.csv("milk.csv")
# Convert from data frame to transactions datatype for arules Rpackage -------------------------
widedata[] <- lapply(widedata, factor) # all columns to factor datatype instead of integer & save as a dataframe.
summary(widedata)  # Check factor in each column.
widedata2 <- widedata[, -1] # Remove ID column as each row is considered one transaction.
trans1 <- as(widedata2, "transactions")  # Convert to transactions datatype
inspect(trans1)
rules1 <- apriori(data = trans1, parameter =
list(minlen = 2, supp=0.4, conf = 0.3, target = "rules"))
summary(rules1)  #  rules satisfy min supp = 0.4, min conf = 0.3. Why so many?
inspect(head(rules1, n = 3, by ="lift"))  # Top 3 rules by Lift.
rule.table1 <- inspect(rules1) # Export as a rule table
# Convert from long format to transactions datatype --------------------------------------------
source("meltmilk.R")
trans2 <- read.transactions(file="longdatamilk.csv", format="single", sep =",",
header=T, cols = c("ID", "variable"))
# Convert from long format to transactions datatype --------------------------------------------
source("meltmilk.R")
# Convert from long format to transactions datatype --------------------------------------------
source("/Users/junlongng/Desktop/NTU/Year_2/Semester 2/Tim's Notes/BC2407 Analytics II/Course Materials Part 1 (wk 1 to 6)/S3 Association Rules/Week 3 Solutions (Assoc Rules)/meltmilk.R")
trans2 <- read.transactions(file="longdatamilk.csv", format="single", sep =",",
header=T, cols = c("ID", "variable"))
inspect(trans2)
rules2 <- apriori(data = trans2, parameter =
list(minlen = 2, supp=0.4, conf = 0.3, target = "rules"))
summary(rules2)  # 2 rules satisfy min supp = 0.4, min conf = 0.3.
inspect(head(rules2, n = 2, by ="lift"))  # Top 2 rules by Lift.
rule.table2 <-inspect(sort(rules2, by ="confidence"))  # Export Rule Table 2
# Faster, alternative way to get longdata from widedata by formatting datavalues to T/F
widedata3 <- read.csv("milk.csv")
ruleslong = apriori(data = longdata, parameter = list(minlen = 2, supp = 0.4, conf = 0.3, target = "rules"))
## Trying it out with a long data
longdata
# Convert from long format to transactions datatype --------------------------------------------
source("/Users/junlongng/Desktop/NTU/Year_2/Semester 2/Tim's Notes/BC2407 Analytics II/Course Materials Part 1 (wk 1 to 6)/S3 Association Rules/Week 3 Solutions (Assoc Rules)/meltmilk.R")
trans2 <- read.transactions(file="longdatamilk.csv", format="single", sep =",",
header=T, cols = c("ID", "variable"))
trans2
## Trying it out with a long data
longdata
inspect(trans2)
setwd("/Users/junlongng/Desktop/NTU/Year_2/Semester 2/Tim's Notes/BC2407 Analytics II/Course Materials Part 1 (wk 1 to 6)/S3 Association Rules/Week 3 Solutions (Assoc Rules)")
setwd("/Users/junlongng/Desktop/NTU/Year_2/Semester 2/Tim's Notes/BC2407 Analytics II/Course Materials Part 1 (wk 1 to 6)/S3 Association Rules/Week 3 Solutions (Assoc Rules)")
setwd("/Users/junlongng/Desktop/NTU/Year_2/Semester 2/BC2407 Analytics II/BC2407 Course Materials/S3 Association Rules")
widedata <- read.csv("milk.csv")
longdata <- melt(data = widedata, id.vars = "ID")
longdata2 <- subset(longdata, value != 0)
longdata2 <- longdata2[, 1:2]  # Keep only first 2 columns.
# Export the long format as csv file.
write.csv(longdata2, "longdatamilk.csv", row.names = F)
# Convert from long format to transactions datatype --------------------------------------------
source("/Users/junlongng/Desktop/NTU/Year_2/Semester 2/BC2407 Analytics II/BC2407 Course Materials/S3 Association Rules")
trans2 <- read.transactions(file="longdatamilk.csv", format="single", sep =",",
header=T, cols = c("ID", "variable"))
trans2
longdata = subset(longdata, value != 0)
## Removing the ID & Index column
longdata = longdata[,1:2]
## Trying it out with a long data
longdata
longdata2
## Converting Longdata to Widedata by formatting values to be logical
widedata = data.frame(lappy(widedata, as.logical))
## Converting Longdata to Widedata by formatting values to be logical
widedata = data.frame(lapply(widedata, as.logical))
widedata
## Converting Longdata to Widedata by formatting values to be logical
longdata = data.frame(lapply(widedata, as.logical))
longdata
# Faster, alternative way to get longdata from widedata by formatting datavalues to T/F
widedata3 <- read.csv("milk.csv")
widedata3 <- data.frame(lapply(widedata3, as.logical))  # convert all columns to logical and save as dataframe
widedata3
widedata3
## Converting Longdata to Widedata by formatting values to be logical
longdata2 = data.frame(lapply(widedata, as.logical))
longdata2
longdata2 = longdata[,-1]
longdata2
trans2 = as(longdata2, "transactions")
trans2
ruleslong = apriori(data = trans2, parameter = list(minlen = 2, supp = 0.4, conf = 0.3, target = "rules"))
summary(ruleslong)
inspect(ruleslong)
ruleslong = apriori(data = trans2, parameter = list(minlen = 2, supp = 0.2, conf = 0.3, target = "rules"))
summary(ruleslong)
inspect(ruleslong)
ruleslong = apriori(data = trans2, parameter = list(minlen = 2, supp = 0.4, conf = 0.3, target = "rules"))
ruleslong = apriori(data = trans2, parameter = list(minlen = 2, supp = 0.2, conf = 0.3, target = "rules"))
ruleslong = apriori(data = trans2, parameter = list(minlen = 2, supp = 0.9, conf = 0.3, target = "rules"))
ruleslong = apriori(data = trans2, parameter = list(minlen = 2, supp = 0.4, conf = 0.3, target = "rules"))
